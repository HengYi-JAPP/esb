plugins {
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'io.franzbecker.gradle-lombok' version '3.0.0'
    id 'com.palantir.docker' version "0.22.1"
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}
allprojects {
    group 'com.hengyi.japp.esb'
    version '1.0'

    apply plugin: 'idea'
    apply plugin: "maven"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'io.franzbecker.gradle-lombok'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}
subprojects {
    apply plugin: 'java'
    sourceCompatibility = 11
    targetCompatibility = 11
    apply plugin: 'application'
    mainClassName = "io.vertx.core.Launcher"
    apply plugin: 'com.palantir.docker'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compileOnly "io.vertx:vertx-codegen:${vertxVersion}"
        testCompile "junit:junit:4.12",
                "io.vertx:vertx-unit:${vertxVersion}",
                "io.vertx:vertx-web-client:${vertxVersion}"
    }

    /**
     * 打包 docker 准备
     */
    shadowJar {
        archiveName "${project.name}-fat.jar"
    }
    docker {
        dependsOn shadowJar
        name "hengyi/${project.name}:${project.version}"
        buildArgs([BUILD_VERSION: 'version'])
        files tasks.shadowJar.outputs
        noCache true
    }
    jar.manifest {
        attributes(
                'Implementation-Title': name,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': sourceCompatibility,
                'Target-Compatibility': targetCompatibility
        )
    }
//    javadoc.options {
//        encoding = 'UTF-8'
//        use = true
//        links 'https://docs.oracle.com/javase/8/docs/api/'
//    }
//    task javadocJar(type: Jar) {
//        classifier = 'javadoc'
//        from javadoc
//    }
//    task sourcesJar(type: Jar) {
//        classifier = 'sources'
//        from sourceSets.main.allSource
//    }
//    artifacts {
//        archives javadocJar, sourcesJar
//    }
}